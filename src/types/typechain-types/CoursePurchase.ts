/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CoursePurchaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allCourseIds"
      | "approveForCourse"
      | "approveTokens"
      | "buyCourse"
      | "checkAllowance"
      | "checkPurchase"
      | "courses"
      | "createCourse"
      | "getCourseCount"
      | "getCourseDetails"
      | "hasPurchased"
      | "nextCourseId"
      | "owner"
      | "paymentToken"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalInitiated"
      | "CourseCreated"
      | "CoursePurchased"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allCourseIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveForCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllowance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPurchase",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "courses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCourse",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCourseCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCourseDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPurchased",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCourseId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allCourseIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveForCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyCourse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCourseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCourseDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCourseId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalInitiatedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    spender: AddressLike
  ];
  export type OutputTuple = [user: string, amount: bigint, spender: string];
  export interface OutputObject {
    user: string;
    amount: bigint;
    spender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CourseCreatedEvent {
  export type InputTuple = [
    courseId: BigNumberish,
    title: string,
    price: BigNumberish,
    instructor: AddressLike
  ];
  export type OutputTuple = [
    courseId: bigint,
    title: string,
    price: bigint,
    instructor: string
  ];
  export interface OutputObject {
    courseId: bigint;
    title: string;
    price: bigint;
    instructor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoursePurchasedEvent {
  export type InputTuple = [
    courseId: BigNumberish,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [courseId: bigint, buyer: string, price: bigint];
  export interface OutputObject {
    courseId: bigint;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CoursePurchase extends BaseContract {
  connect(runner?: ContractRunner | null): CoursePurchase;
  waitForDeployment(): Promise<this>;

  interface: CoursePurchaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allCourseIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  approveForCourse: TypedContractMethod<
    [courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyCourse: TypedContractMethod<
    [courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkAllowance: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  checkPurchase: TypedContractMethod<
    [user: AddressLike, courseId: BigNumberish],
    [boolean],
    "view"
  >;

  courses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string, boolean] & {
        id: bigint;
        title: string;
        description: string;
        price: bigint;
        instructor: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  createCourse: TypedContractMethod<
    [title: string, description: string, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCourseCount: TypedContractMethod<[], [bigint], "view">;

  getCourseDetails: TypedContractMethod<
    [courseId: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        id: bigint;
        title: string;
        description: string;
        price: bigint;
        instructor: string;
      }
    ],
    "view"
  >;

  hasPurchased: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  nextCourseId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paymentToken: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allCourseIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "approveForCourse"
  ): TypedContractMethod<[courseId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyCourse"
  ): TypedContractMethod<[courseId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkAllowance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkPurchase"
  ): TypedContractMethod<
    [user: AddressLike, courseId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "courses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string, boolean] & {
        id: bigint;
        title: string;
        description: string;
        price: bigint;
        instructor: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCourse"
  ): TypedContractMethod<
    [title: string, description: string, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCourseCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCourseDetails"
  ): TypedContractMethod<
    [courseId: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        id: bigint;
        title: string;
        description: string;
        price: bigint;
        instructor: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPurchased"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextCourseId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ApprovalInitiated"
  ): TypedContractEvent<
    ApprovalInitiatedEvent.InputTuple,
    ApprovalInitiatedEvent.OutputTuple,
    ApprovalInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "CourseCreated"
  ): TypedContractEvent<
    CourseCreatedEvent.InputTuple,
    CourseCreatedEvent.OutputTuple,
    CourseCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CoursePurchased"
  ): TypedContractEvent<
    CoursePurchasedEvent.InputTuple,
    CoursePurchasedEvent.OutputTuple,
    CoursePurchasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ApprovalInitiated(address,uint256,address)": TypedContractEvent<
      ApprovalInitiatedEvent.InputTuple,
      ApprovalInitiatedEvent.OutputTuple,
      ApprovalInitiatedEvent.OutputObject
    >;
    ApprovalInitiated: TypedContractEvent<
      ApprovalInitiatedEvent.InputTuple,
      ApprovalInitiatedEvent.OutputTuple,
      ApprovalInitiatedEvent.OutputObject
    >;

    "CourseCreated(uint256,string,uint256,address)": TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;
    CourseCreated: TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;

    "CoursePurchased(uint256,address,uint256)": TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;
    CoursePurchased: TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
