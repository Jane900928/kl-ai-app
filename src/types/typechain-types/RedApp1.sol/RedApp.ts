/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace RedApp {
  export type ClaimStruct = {
    claimant: AddressLike;
    amount: BigNumberish;
    claimedTime: BigNumberish;
  };

  export type ClaimStructOutput = [
    claimant: string,
    amount: bigint,
    claimedTime: bigint
  ] & { claimant: string; amount: bigint; claimedTime: bigint };
}

export interface RedAppInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRedPacket"
      | "createRedPacket"
      | "getAvailableRedPackets"
      | "getPacketClaims"
      | "getRedPacket"
      | "getUserClaimedPackets"
      | "getUserCreatedPackets"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RedPacketClaimed" | "RedPacketCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimRedPacket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRedPacket",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableRedPackets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPacketClaims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedPacket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClaimedPackets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCreatedPackets",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRedPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRedPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableRedPackets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPacketClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserClaimedPackets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCreatedPackets",
    data: BytesLike
  ): Result;
}

export namespace RedPacketClaimedEvent {
  export type InputTuple = [
    packetId: BigNumberish,
    claimant: AddressLike,
    amount: BigNumberish,
    claimedTime: BigNumberish
  ];
  export type OutputTuple = [
    packetId: bigint,
    claimant: string,
    amount: bigint,
    claimedTime: bigint
  ];
  export interface OutputObject {
    packetId: bigint;
    claimant: string;
    amount: bigint;
    claimedTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedPacketCreatedEvent {
  export type InputTuple = [
    packetId: BigNumberish,
    creator: AddressLike,
    totalAmount: BigNumberish,
    totalCount: BigNumberish,
    message: string,
    createdTime: BigNumberish
  ];
  export type OutputTuple = [
    packetId: bigint,
    creator: string,
    totalAmount: bigint,
    totalCount: bigint,
    message: string,
    createdTime: bigint
  ];
  export interface OutputObject {
    packetId: bigint;
    creator: string;
    totalAmount: bigint;
    totalCount: bigint;
    message: string;
    createdTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RedApp extends BaseContract {
  connect(runner?: ContractRunner | null): RedApp;
  waitForDeployment(): Promise<this>;

  interface: RedAppInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRedPacket: TypedContractMethod<
    [packetId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  createRedPacket: TypedContractMethod<
    [count: BigNumberish, message: string],
    [bigint],
    "payable"
  >;

  getAvailableRedPackets: TypedContractMethod<[], [bigint[]], "view">;

  getPacketClaims: TypedContractMethod<
    [packetId: BigNumberish],
    [RedApp.ClaimStructOutput[]],
    "view"
  >;

  getRedPacket: TypedContractMethod<
    [packetId: BigNumberish],
    [
      [string, bigint, bigint, bigint, string, boolean] & {
        creator: string;
        totalAmount: bigint;
        totalCount: bigint;
        remainingCount: bigint;
        message: string;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getUserClaimedPackets: TypedContractMethod<[], [bigint[]], "view">;

  getUserCreatedPackets: TypedContractMethod<[], [bigint[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRedPacket"
  ): TypedContractMethod<[packetId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "createRedPacket"
  ): TypedContractMethod<
    [count: BigNumberish, message: string],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getAvailableRedPackets"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPacketClaims"
  ): TypedContractMethod<
    [packetId: BigNumberish],
    [RedApp.ClaimStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRedPacket"
  ): TypedContractMethod<
    [packetId: BigNumberish],
    [
      [string, bigint, bigint, bigint, string, boolean] & {
        creator: string;
        totalAmount: bigint;
        totalCount: bigint;
        remainingCount: bigint;
        message: string;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserClaimedPackets"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserCreatedPackets"
  ): TypedContractMethod<[], [bigint[]], "view">;

  getEvent(
    key: "RedPacketClaimed"
  ): TypedContractEvent<
    RedPacketClaimedEvent.InputTuple,
    RedPacketClaimedEvent.OutputTuple,
    RedPacketClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RedPacketCreated"
  ): TypedContractEvent<
    RedPacketCreatedEvent.InputTuple,
    RedPacketCreatedEvent.OutputTuple,
    RedPacketCreatedEvent.OutputObject
  >;

  filters: {
    "RedPacketClaimed(uint256,address,uint256,uint256)": TypedContractEvent<
      RedPacketClaimedEvent.InputTuple,
      RedPacketClaimedEvent.OutputTuple,
      RedPacketClaimedEvent.OutputObject
    >;
    RedPacketClaimed: TypedContractEvent<
      RedPacketClaimedEvent.InputTuple,
      RedPacketClaimedEvent.OutputTuple,
      RedPacketClaimedEvent.OutputObject
    >;

    "RedPacketCreated(uint256,address,uint256,uint256,string,uint256)": TypedContractEvent<
      RedPacketCreatedEvent.InputTuple,
      RedPacketCreatedEvent.OutputTuple,
      RedPacketCreatedEvent.OutputObject
    >;
    RedPacketCreated: TypedContractEvent<
      RedPacketCreatedEvent.InputTuple,
      RedPacketCreatedEvent.OutputTuple,
      RedPacketCreatedEvent.OutputObject
    >;
  };
}
