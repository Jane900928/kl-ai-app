/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RedPacketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRedPacket"
      | "createRedPacket"
      | "getPacketDetails"
      | "hasClaimed"
      | "owner"
      | "packetCount"
      | "packets"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PacketClaimed" | "PacketCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimRedPacket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRedPacket",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPacketDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "packetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "packets",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRedPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRedPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPacketDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "packets", data: BytesLike): Result;
}

export namespace PacketClaimedEvent {
  export type InputTuple = [
    packetId: BigNumberish,
    claimer: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    packetId: bigint,
    claimer: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    packetId: bigint;
    claimer: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PacketCreatedEvent {
  export type InputTuple = [
    packetId: BigNumberish,
    creator: AddressLike,
    amount: BigNumberish,
    count: BigNumberish,
    isRandom: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    packetId: bigint,
    creator: string,
    amount: bigint,
    count: bigint,
    isRandom: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    packetId: bigint;
    creator: string;
    amount: bigint;
    count: bigint;
    isRandom: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RedPacket extends BaseContract {
  connect(runner?: ContractRunner | null): RedPacket;
  waitForDeployment(): Promise<this>;

  interface: RedPacketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRedPacket: TypedContractMethod<
    [packetId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createRedPacket: TypedContractMethod<
    [count: BigNumberish, isRandom: boolean],
    [bigint],
    "payable"
  >;

  getPacketDetails: TypedContractMethod<
    [packetId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        creator: string;
        amount: bigint;
        count: bigint;
        remaining: bigint;
        createdAt: bigint;
        isRandom: boolean;
      }
    ],
    "view"
  >;

  hasClaimed: TypedContractMethod<
    [packetId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  packetCount: TypedContractMethod<[], [bigint], "view">;

  packets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        creator: string;
        amount: bigint;
        count: bigint;
        remaining: bigint;
        createdAt: bigint;
        isRandom: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRedPacket"
  ): TypedContractMethod<[packetId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRedPacket"
  ): TypedContractMethod<
    [count: BigNumberish, isRandom: boolean],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getPacketDetails"
  ): TypedContractMethod<
    [packetId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        creator: string;
        amount: bigint;
        count: bigint;
        remaining: bigint;
        createdAt: bigint;
        isRandom: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<
    [packetId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "packetCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "packets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        creator: string;
        amount: bigint;
        count: bigint;
        remaining: bigint;
        createdAt: bigint;
        isRandom: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "PacketClaimed"
  ): TypedContractEvent<
    PacketClaimedEvent.InputTuple,
    PacketClaimedEvent.OutputTuple,
    PacketClaimedEvent.OutputObject
  >;
  getEvent(
    key: "PacketCreated"
  ): TypedContractEvent<
    PacketCreatedEvent.InputTuple,
    PacketCreatedEvent.OutputTuple,
    PacketCreatedEvent.OutputObject
  >;

  filters: {
    "PacketClaimed(uint256,address,uint256,uint256)": TypedContractEvent<
      PacketClaimedEvent.InputTuple,
      PacketClaimedEvent.OutputTuple,
      PacketClaimedEvent.OutputObject
    >;
    PacketClaimed: TypedContractEvent<
      PacketClaimedEvent.InputTuple,
      PacketClaimedEvent.OutputTuple,
      PacketClaimedEvent.OutputObject
    >;

    "PacketCreated(uint256,address,uint256,uint256,bool,uint256)": TypedContractEvent<
      PacketCreatedEvent.InputTuple,
      PacketCreatedEvent.OutputTuple,
      PacketCreatedEvent.OutputObject
    >;
    PacketCreated: TypedContractEvent<
      PacketCreatedEvent.InputTuple,
      PacketCreatedEvent.OutputTuple,
      PacketCreatedEvent.OutputObject
    >;
  };
}
