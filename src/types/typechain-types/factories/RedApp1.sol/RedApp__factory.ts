/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { RedApp, RedAppInterface } from "../../RedApp1.sol/RedApp";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "packetId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "claimant",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "claimedTime",
        type: "uint256",
      },
    ],
    name: "RedPacketClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "packetId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalCount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "createdTime",
        type: "uint256",
      },
    ],
    name: "RedPacketCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "packetId",
        type: "uint256",
      },
    ],
    name: "claimRedPacket",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "createRedPacket",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAvailableRedPackets",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "packetId",
        type: "uint256",
      },
    ],
    name: "getPacketClaims",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "claimant",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "claimedTime",
            type: "uint256",
          },
        ],
        internalType: "struct RedApp.Claim[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "packetId",
        type: "uint256",
      },
    ],
    name: "getRedPacket",
    outputs: [
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "remainingCount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserClaimedPackets",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserCreatedPackets",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50610f678061001c5f395ff3fe608060405260043610610070575f3560e01c8063360794f71161004c578063360794f7146100e55780636656432e146101165780639a7f987514610145578063a9e341e214610159575f5ffd5b80626b4e481461007b578063036819c0146100a55780631cf4cc42146100b9575f5ffd5b3661007757005b5f5ffd5b348015610086575f5ffd5b5061008f61017a565b60405161009c9190610b66565b60405180910390f35b3480156100b0575f5ffd5b5061008f6102ae565b3480156100c4575f5ffd5b506100d86100d3366004610ba8565b61030c565b60405161009c9190610bbf565b3480156100f0575f5ffd5b506101046100ff366004610ba8565b61039d565b60405161009c96959493929190610c18565b348015610121575f5ffd5b50610135610130366004610ba8565b610487565b604051901515815260200161009c565b348015610150575f5ffd5b5061008f610759565b61016c610167366004610c7a565b6107b5565b60405190815260200161009c565b60605f805b5f548110156101de575f818152600160205260409020600681015460ff1680156101ac57505f8160030154115b80156101c2575080546001600160a01b03163314155b156101d557826101d181610d05565b9350505b5060010161017f565b505f8167ffffffffffffffff8111156101f9576101f9610d1d565b604051908082528060200260200182016040528015610222578160200160208202803683370190505b5090505f805b5f548110156102a5575f818152600160205260409020600681015460ff16801561025557505f8160030154115b801561026b575080546001600160a01b03163314155b1561029c578184848151811061028357610283610d31565b60209081029190910101528261029881610d05565b9350505b50600101610228565b50909392505050565b335f9081526004602090815260409182902080548351818402810184019094528084526060939283018282801561030257602002820191905f5260205f20905b8154815260200190600101908083116102ee575b5050505050905090565b606060025f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610392575f848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015491830191909152908352909201910161033e565b505050509050919050565b5f8181526001602081905260408220805491810154600282015460038301546006840154600485018054889788978897606097899792966001600160a01b03909416959194909360ff169082906103f390610d45565b80601f016020809104026020016040519081016040528092919081815260200182805461041f90610d45565b801561046a5780601f106104415761010080835404028352916020019161046a565b820191905f5260205f20905b81548152906001019060200180831161044d57829003601f168201915b505050505091509650965096509650965096505091939550919395565b5f818152600160205260408120600681015460ff166104fe5760405162461bcd60e51b815260206004820152602860248201527f526564207061636b657420646f6573206e6f74206578697374206f7220697320604482015267696e61637469766560c01b60648201526084015b60405180910390fd5b80546001600160a01b031633036105575760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f7420636c61696d20796f7572206f776e20726564207061636b657460448201526064016104f5565b5f8160030154116105b45760405162461bcd60e51b815260206004820152602160248201527f526564207061636b657420686173206265656e2066756c6c7920636c61696d656044820152601960fa1b60648201526084016104f5565b6105be3384610a2f565b1561061c5760405162461bcd60e51b815260206004820152602860248201527f596f75206861766520616c726561647920636c61696d6564207468697320726560448201526719081c1858dad95d60c21b60648201526084016104f5565b5f6106278483610a91565b6003830180549192505f61063a83610d7d565b919050555081600301545f036106575760068201805460ff191690555b5f84815260026020818152604080842081516060810183523380825281850188815242838601908152845460018082018755958a52878a209451600390910290940180546001600160a01b0319166001600160a01b039095169490941784559051838501555191909501558385526004835281852080549182018155855291842090910187905551909182916108fc85150291859190818181858888f19350505050158015610708573d5f5f3e3d5ffd5b5042336001600160a01b0316867fbb7f025bba52443010cd39d48ad8423a7c12533274f1d7943d72f8c4f4e0f7028560405161074691815260200190565b60405180910390a4506001949350505050565b335f9081526003602090815260409182902080548351818402810184019094528084526060939283018282801561030257602002820191905f5260205f20908154815260200190600101908083116102ee575050505050905090565b5f5f34116108055760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016104f5565b5f84116108545760405162461bcd60e51b815260206004820152601c60248201527f436f756e74206d7573742062652067726561746572207468616e20300000000060448201526064016104f5565b61085f846001610d92565b3410156108ba5760405162461bcd60e51b8152602060048201526024808201527f496e73756666696369656e7420616d6f756e7420666f722064697374726962756044820152633a34b7b760e11b60648201526084016104f5565b5f805481806108c883610d05565b9190505590506040518060e00160405280336001600160a01b0316815260200134815260200186815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201829052509385525050426020808501919091526001604094850181905286845280825292849020855181546001600160a01b0319166001600160a01b03909116178155908501519281019290925550908201516002820155606082015160038201556080820151600482019061099d9082610df5565b5060a0820151600582015560c0909101516006909101805460ff1916911515919091179055335f818152600360209081526040808320805460018101825590845291909220018390555142919083907f43c27f9c5e44e2391bb7ae26e58c12ba002e63caa78e73ada668ed5e5978b17a90610a1f9034908b908b908b90610eb0565b60405180910390a4949350505050565b6001600160a01b0382165f908152600460205260408120815b8154811015610a855783828281548110610a6457610a64610d31565b905f5260205f20015403610a7d57600192505050610a8b565b600101610a48565b505f9150505b92915050565b5f8160030154600103610aa957506001810154610a8b565b60408051426020820152449181019190915233606090811b6bffffffffffffffffffffffff191690820152607481018490524360948201525f9060b401604051602081830303815290604052805190602001205f1c90505f600190505f8160018660030154610b189190610eec565b610b229190610d92565b8560010154610b319190610eec565b9050610b3d8282610eec565b610b48906001610eff565b610b529084610f12565b610b5c9083610eff565b9695505050505050565b602080825282518282018190525f918401906040840190835b81811015610b9d578351835260209384019390920191600101610b7f565b509095945050505050565b5f60208284031215610bb8575f5ffd5b5035919050565b602080825282518282018190525f918401906040840190835b81811015610b9d57835180516001600160a01b03168452602080820151818601526040918201519185019190915290930192606090920191600101610bd8565b60018060a01b038716815285602082015284604082015283606082015260c060808201525f83518060c0840152806020860160e085015e5f60e0828501015260e0601f19601f83011684010191505082151560a0830152979650505050505050565b5f5f5f60408486031215610c8c575f5ffd5b83359250602084013567ffffffffffffffff811115610ca9575f5ffd5b8401601f81018613610cb9575f5ffd5b803567ffffffffffffffff811115610ccf575f5ffd5b866020828401011115610ce0575f5ffd5b939660209190910195509293505050565b634e487b7160e01b5f52601160045260245ffd5b5f60018201610d1657610d16610cf1565b5060010190565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b600181811c90821680610d5957607f821691505b602082108103610d7757634e487b7160e01b5f52602260045260245ffd5b50919050565b5f81610d8b57610d8b610cf1565b505f190190565b8082028115828204841417610a8b57610a8b610cf1565b601f821115610df057805f5260205f20601f840160051c81016020851015610dce5750805b601f840160051c820191505b81811015610ded575f8155600101610dda565b50505b505050565b815167ffffffffffffffff811115610e0f57610e0f610d1d565b610e2381610e1d8454610d45565b84610da9565b6020601f821160018114610e55575f8315610e3e5750848201515b5f19600385901b1c1916600184901b178455610ded565b5f84815260208120601f198516915b82811015610e845787850151825560209485019460019092019101610e64565b5084821015610ea157868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b84815283602082015260606040820152816060820152818360808301375f818301608090810191909152601f909201601f191601019392505050565b81810381811115610a8b57610a8b610cf1565b80820180821115610a8b57610a8b610cf1565b5f82610f2c57634e487b7160e01b5f52601260045260245ffd5b50069056fea2646970667358221220b6fd61c05d5a91e668cff4bf6e719930f4468980733c639a4848bc390d2ca32964736f6c634300081c0033";

type RedAppConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RedAppConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RedApp__factory extends ContractFactory {
  constructor(...args: RedAppConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RedApp & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RedApp__factory {
    return super.connect(runner) as RedApp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RedAppInterface {
    return new Interface(_abi) as RedAppInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): RedApp {
    return new Contract(address, _abi, runner) as unknown as RedApp;
  }
}
